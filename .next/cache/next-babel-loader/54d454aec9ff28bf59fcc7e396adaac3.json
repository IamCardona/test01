{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/iamcardonamhis/Desktop/next/shop/pages/user/login.js\";\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport firebase from '../../firebaseConfig';\nimport Layout from '../../components/layout';\nexport default function () {\n  var router = useRouter();\n\n  var _useState = useState(null),\n      error = _useState[0],\n      setError = _useState[1];\n\n  var formik = useFormik({\n    initialValues: {\n      email: '',\n      password: ''\n    },\n    validationSchema: Yup.object({\n      email: Yup.string().email('Email no valido').required('La contraseña es obligatoria'),\n      password: Yup.string().required('La contraseña es obligatoria')\n    }),\n    onSubmit: function () {\n      var _onSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(valores) {\n        var email, password;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                email = valores.email, password = valores.password;\n                _context.prev = 1;\n                _context.next = 4;\n                return firebase.auth().signInWithEmailAndPassword(email, password);\n\n              case 4:\n                router.push('/');\n                _context.next = 11;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](1);\n                console.log(_context.t0);\n\n                if (_context.t0.message === \"The password is invalid or the user does not have a password.\") {\n                  setError(\"Contraseña incorrecta\");\n                }\n\n              case 11:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[1, 7]]);\n      }));\n\n      function onSubmit(_x) {\n        return _onSubmit.apply(this, arguments);\n      }\n\n      return onSubmit;\n    }()\n  });\n  return __jsx(\"div\", {\n    style: {\n      width: \"100%\",\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, __jsx(\"img\", {\n    src: \"/logo.png\",\n    alt: \"Logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }));\n}\n/**\n * \n * <form onSubmit={formik.handleSubmit}>\n\n                <div>\n                    <label htmlFor=\"email\">Email</label>\n                    <input\n                        id=\"email\"\n                        type=\"email\"\n                        placeholder=\"Email\"\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        value={formik.values.email}\n                    />\n\n                    {formik.touched.email && formik.errors.email ? (\n                        <div>\n                            <h1>{formik.errors.email}</h1>\n                        </div> \n                    ) : null}\n\n                </div>\n\n                <div>\n                    <label htmlFor=\"password\">Password</label>\n                    <input\n                        id=\"password\"\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        value={formik.values.password}\n                    />\n\n                    {formik.touched.password && formik.errors.password ? (\n                        <div>\n                            <h1>{formik.errors.password}</h1>\n                        </div> \n                    ) : null}\n\n                </div>\n\n                <input type=\"submit\" value=\"Submit\" />\n\n            </form>\n */","map":{"version":3,"sources":["/Users/iamcardonamhis/Desktop/next/shop/pages/user/login.js"],"names":["React","useState","useRouter","useFormik","Yup","firebase","Layout","router","error","setError","formik","initialValues","email","password","validationSchema","object","string","required","onSubmit","valores","auth","signInWithEmailAndPassword","push","console","log","message","width","textAlign"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,SAASC,SAAT,QAAyB,QAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AAEA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,MAAP,MAAmB,yBAAnB;AAEA,eAAe,YAAW;AACtB,MAAMC,MAAM,GAAGL,SAAS,EAAxB;;AADsB,kBAEID,QAAQ,CAAC,IAAD,CAFZ;AAAA,MAEfO,KAFe;AAAA,MAERC,QAFQ;;AAItB,MAAMC,MAAM,GAAGP,SAAS,CAAC;AACrBQ,IAAAA,aAAa,EAAE;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KADM;AAKrBC,IAAAA,gBAAgB,EAAEV,GAAG,CAACW,MAAJ,CAAW;AACzBH,MAAAA,KAAK,EAAER,GAAG,CAACY,MAAJ,GACFJ,KADE,CACI,iBADJ,EAEFK,QAFE,CAEO,8BAFP,CADkB;AAIzBJ,MAAAA,QAAQ,EAAET,GAAG,CAACY,MAAJ,GACLC,QADK,CACI,8BADJ;AAJe,KAAX,CALG;AAYrBC,IAAAA,QAAQ;AAAA,+EAAE,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACEP,gBAAAA,KADF,GACsBO,OADtB,CACEP,KADF,EACSC,QADT,GACsBM,OADtB,CACSN,QADT;AAAA;AAAA;AAAA,uBAIIR,QAAQ,CAACe,IAAT,GAAgBC,0BAAhB,CAA2CT,KAA3C,EAAkDC,QAAlD,CAJJ;;AAAA;AAKFN,gBAAAA,MAAM,CAACe,IAAP,CAAY,GAAZ;AALE;AAAA;;AAAA;AAAA;AAAA;AAOFC,gBAAAA,OAAO,CAACC,GAAR;;AAEA,oBAAG,YAAEC,OAAF,KAAc,+DAAjB,EAAkF;AAC9EhB,kBAAAA,QAAQ,CAAC,uBAAD,CAAR;AACH;;AAXC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAZa,GAAD,CAAxB;AA4BA,SACI;AAAK,IAAA,KAAK,EAAE;AAAEiB,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,SAAS,EAAE;AAA5B,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,GAAG,EAAC,WAAT;AAAqB,IAAA,GAAG,EAAC,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ;AAUH;AAED","sourcesContent":["import React, { useState } from 'react'\nimport { useRouter } from 'next/router'\n\nimport { useFormik } from'formik'\nimport * as Yup from 'yup'\n\nimport firebase from '../../firebaseConfig'\nimport Layout from '../../components/layout'\n\nexport default function() {\n    const router = useRouter()\n    const [error, setError] = useState(null)\n\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: ''\n        },\n        validationSchema: Yup.object({\n            email: Yup.string()\n                .email('Email no valido')\n                .required('La contraseña es obligatoria'),\n            password: Yup.string()\n                .required('La contraseña es obligatoria')\n        }),\n        onSubmit: async valores => {\n            const { email, password } = valores;\n\n            try {\n                await firebase.auth().signInWithEmailAndPassword(email, password)\n                router.push('/')\n            } catch(e) {\n                console.log(e)\n\n                if(e.message === \"The password is invalid or the user does not have a password.\") {\n                    setError(\"Contraseña incorrecta\")\n                }\n            }\n        }\n    })\n\n    return(\n        <div style={{ width: \"100%\", textAlign: \"center\" }}>\n            <div>\n                <img src=\"/logo.png\" alt=\"Logo\" />\n            </div>\n            <div>\n\n            </div>\n        </div>\n    )\n}\n\n/**\n * \n * <form onSubmit={formik.handleSubmit}>\n\n                <div>\n                    <label htmlFor=\"email\">Email</label>\n                    <input\n                        id=\"email\"\n                        type=\"email\"\n                        placeholder=\"Email\"\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        value={formik.values.email}\n                    />\n\n                    {formik.touched.email && formik.errors.email ? (\n                        <div>\n                            <h1>{formik.errors.email}</h1>\n                        </div> \n                    ) : null}\n\n                </div>\n\n                <div>\n                    <label htmlFor=\"password\">Password</label>\n                    <input\n                        id=\"password\"\n                        type=\"password\"\n                        placeholder=\"Password\"\n                        onChange={formik.handleChange}\n                        onBlur={formik.handleBlur}\n                        value={formik.values.password}\n                    />\n\n                    {formik.touched.password && formik.errors.password ? (\n                        <div>\n                            <h1>{formik.errors.password}</h1>\n                        </div> \n                    ) : null}\n\n                </div>\n\n                <input type=\"submit\" value=\"Submit\" />\n\n            </form>\n */"]},"metadata":{},"sourceType":"module"}